#!/usr/bin/env bash

set -e
set -o nounset
set -o pipefail
umask 177

# Parameters
url="${1}/api/v1/servers/${2}"
# $2 is the server
apikey="${apikey:-}"
tmpfile="${3}"
zonename="${4}"

# Parse the rest of the parameters
zone="$(jq --arg zonename "${zonename}" '.pdns_auth_api_zones[$zonename]' < "${tmpfile}")"

jsonParse() {
	echo "${zone}" | jq -r --arg varname "${1}" '.[$varname]'
}

jsonParseWithDefault() {
	value="$(jsonParse "${1}")"
	if [ "${value}" = null ]; then
		value="${2}"
	fi
	echo "${value}"
}

jsonParseMandatoryForNonSlave() {
	value="$(jsonParse "${1}")"
	if [ "${value}" = null ]; then
		if [ "${2}" = Slave ]; then
			value=''
		else
			echo "Mandatory variable ${1} not defined" >&2
			exit 1
		fi
	fi
	echo "${value}"
}

kind="$(jsonParseWithDefault kind Master)"
soaEdit="$(jsonParseMandatoryForNonSlave soaEdit "${kind}")"
soaEditApi="$(jsonParseWithDefault soaEditApi "${soaEdit}")"
dnssec="$(jsonParseWithDefault dnssec false)"
presigned="$(jsonParseWithDefault presigned false)"
apiRectify="$(jsonParseWithDefault apiRectify true)"
nsec3Param="$(jsonParseWithDefault nsec3 '')"
nsec3Narrow="$(jsonParseWithDefault nsec3Narrow false)"
masters="$(jsonParse masters)"
eval "$(echo "${masters}" | jq -r '@sh "mastersAsNewlines=\"\(.)\""')"
if [ "${mastersAsNewlines}" = null ]; then
	mastersAsNewlines=''
fi

if [ "${kind}" = Slave ] && [ "${masters}" = null ]; then
	echo "Missing nameservers"
	exit 1
fi

# Initial JSON
json="{
	\"name\": \"${zonename}.\",
	\"kind\": \"${kind}\","

if [ "${kind}" = 'Slave' ]; then
	json="${json}
		\"masters\": ${masters},"
else
	json="${json}
		\"soa_edit\": \"${soaEdit}\",
		\"soa_edit_api\": \"${soaEditApi}\",
		\"dnssec\": ${dnssec},
		\"presigned\": ${presigned},
		\"api_rectify\": ${apiRectify},
		\"nsec3param\": \"${nsec3Param}\",
		\"nsec3narrow\": ${nsec3Narrow},"

fi

json="${json::-1}
}"

# Does it already exist?
new=0
if ! [ "$(curl -s -o /dev/stderr -w "%{http_code}" -H "X-API-Key: ${apikey}" "${url}/zones/${zonename}.")" = 200 ]; then
	# Add nameservers if needed
	if [ "${kind}" = 'Master' ] || [ "${kind}" = 'Native' ]; then
		json="${json::-2},\"nameservers\": [ \"dummy.ns.\" ]}"
	fi
	# Create zone
	ret="$(curl -s -o /dev/stderr -w "%{http_code}" -X POST -H "X-API-Key: ${apikey}" -d "${json}" "${url}/zones")"
	if [ "${ret}" != 201 ]; then
		echo "curl returned HTTP code ${ret} when creating zone"
		exit 1
	fi
	new=1
fi

# Already exists - do we need to modify it?
if [ "${new}" = 0 ]; then
	# Fetch data
	eval "$(curl -s -H "X-API-Key: ${apikey}" "${url}/zones/${zonename}." | \
		jq -r '@sh "currentKind=\(.kind) currentSoaEdit=\(.soa_edit) currentSoaEditApi=\(.soa_edit_api) currentDnssec=\(.dnssec) currentPresigned=\(.presigned) currentApiRectify=\(.api_rectify) currentNsec3Param=\(.nsec3param) currentNsec3Narrow=\(.nsec3narrow) currentMasters=\"\(.masters)\""')"
	if [ "${currentPresigned}" = null ]; then
		currentPresigned=false
	fi

	# Change data if needed
echo "${currentMasters} == ${mastersAsNewlines}"
	if [ "${kind}" != "${currentKind}" ] || ([ "${kind}" != 'Slave' ] && \
		([ "${soaEdit}" != "${currentSoaEdit}" ] || \
		[ "${soaEditApi}" != "${currentSoaEditApi}" ] || \
		[ "${dnssec}" != "${currentDnssec}" ] || \
		[ "${presigned}" != "${currentPresigned}" ] || \
		[ "${apiRectify}" != "${currentApiRectify}" ] || \
		[ "${nsec3Param}" != "${currentNsec3Param}" ] || \
		[ "${nsec3Narrow}" != "${currentNsec3Narrow}" ])) || \
		([ "${kind}" == 'Slave' ] && [ "${mastersAsNewlines}" != "${currentMasters}" ]); then
		ret="$(curl -s -o /dev/stderr -w "%{http_code}" -X PUT -H "X-API-Key: ${apikey}" -d "${json}" "${url}/zones/${zonename}.")"
		if [ "${ret}" != 204 ]; then
			echo "curl returned HTTP code ${ret} when updating zone details"
			exit 1
		fi
		echo CHANGED
	fi
fi
