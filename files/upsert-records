#!/bin/bash -e

set -o nounset
umask 177

# Parameters
url="${1}/api/v1/servers/${2}"
# $2 is the server
apikey="${apikey:-}"
zonename="${3}"
# The rrset is passed via stdin because the quotes are mangled when
# specifying the JSON on the command line.
expected="$(cat)"

# Parse zone metadata
eval "$(echo "${expected}" | jq -r '@sh "defaultTtl=\(.defaultTTL)"')"
eval "$(echo "${expected}" | jq -r '@sh "expectedSoa=\(.records | .[] | to_entries | .[] | select(.key == "SOA").value | .[] | select(.c != null).c)"')"

if [ -z "${expectedSoa}" ]; then
	echo 'No SOA record found' > /dev/stderr
	exit 1
fi

expectedSerial="$(echo "${expectedSoa}" | cut -d ' ' -f3)"

# Filter out the records
records="$(echo "${expected}" | jq '.records')"
# First step of preparing the RRsets.
# This groups the records into RRsets.
# The TTL is at the wrong location, but step 2 fixes that
# What is left to be done:
# - Wrap everything into "rrsets"
# - Add changetype if needed
records="$(echo "${records}" | jq '[. | to_entries[] | (.value | to_entries[]) as $v | { "name": .key, "type": $v.key, "records": [ $v.value[] | if .c != null then { "content": .c, "disabled": false } + if .r != null then { "set-ptr": .r } else {} end else { "ttl": .t } end ] }]')"
# Second step moves TTL to correct location and assigns default TTL if needed
records="$(echo "${records}" | jq --arg defaultTtl "${defaultTtl}" '[.[] | .ttl = (.records | map(select(has("ttl")).ttl))[0] ][] | if .ttl == null then .ttl = ($defaultTtl | tonumber) else .ttl = .ttl end | del(.records[] | select(has("ttl"))) | .name = .name + "."')"

# See how it currently looks (removing comments and sorting)
current="$(curl -s -H "X-API-Key: ${apikey}" "${url}/zones/${zonename}." | jq -S '[ .rrsets[] | del(.comments) ]')"
current="$(echo "${current}" | jq '. |= sort_by(.name)' | jq '. |= sort_by(.type)' | jq -S '.[].records |= sort_by(.content)')"

# Get current SOA
if [ "${expectedSerial}" = AUTO ]; then
	eval "$(echo "${current}" | jq -r '@sh "currentSoa=\(.[] | select(.type == "SOA").records | .[].content)"')"
	currentSerial="$(echo "${currentSoa}" | cut -d ' ' -f3)"
	if [ -z "${currentSerial}" ] || [ "${currentSerial}" = null ]; then
		currentSerial=0
	fi
	# Insert current serial back to expected SOA
	newSoa="$(echo "${expectedSoa}" | cut -d' ' -f1-2) ${currentSerial} $(echo "${expectedSoa}" | cut -d ' ' -f4-)"
	# Insert the new SOA back into what we expect
	records="$(echo "${records}" | sed "s/${expectedSoa}/${newSoa}/g")"
fi

# Remove PTR, sort the records, and wrap them into "rrsets" for comparing with the API
recordsWithoutPtr="$(echo "${records}" | jq -S 'del(.records[]."set-ptr")')"
recordsWithoutPtr="$(echo "${recordsWithoutPtr}" | jq -s '.' | jq '. |= sort_by(.name)' | jq '. |= sort_by(.type)' | jq -S '.[].records |= sort_by(.content)')"

# This compares two JSON objects
# Taken from: https://stackoverflow.com/a/31933234/1432545
compare="$(jq --slurpfile a <(echo "${recordsWithoutPtr}") --slurpfile b <(echo "${current}") -n 'def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); ($a | (post_recurse | arrays) |= sort) as $a | ($b | (post_recurse | arrays) |= sort) as $b | $a == $b')"

if [ "${compare}" = true ]; then
	# This echo is not really needed, but helps troubleshooting problems
	echo EXITING
	exit
fi

# If we made it here, replace the records

# Add the changetype
recordsWithChangetype="$(echo "${records}" | jq '. + { changetype: "REPLACE" }' | jq -s '')"

# Check if we need to remove any records
toDel=''
while IFS= read -r line; do
	name="$(echo "${line}" | cut -d',' -f1)"
	type="$(echo "${line}" | cut -d',' -f2)"
	toDel="${toDel}, { \"name\": \"${name}\", \"type\": \"${type}\", \"changetype\": \"DELETE\" }"
	# Those two jq calls are the same.
	# Each one maps the records to a [name],[type] CSV
done < <(comm -23 <(echo "${current}" | jq -r '[.[]] | map([.name, .type]) | .[] | join(",")' | sort) <(echo "${recordsWithoutPtr}" | jq -r '[.[]] | map([.name, .type]) | .[] | join(",")' | sort))
if ! [ -z "${toDel}" ]; then
	recordsWithChangetype="${recordsWithChangetype::-2}${toDel}]"
fi

# Go...?
result="$(echo "{ \"rrsets\": ${recordsWithChangetype} }" | \
	curl -s -X PATCH -o /dev/stderr -w '%{http_code}' \
	--data @- \
	-H "X-API-Key: ${apikey}" "${url}/zones/${zonename}.")"

[ "${result}" = 204 ] || exit "${result}"

echo CHANGED
